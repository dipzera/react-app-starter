'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = require('react');

var PropTypes = require('prop-types');

var NODE_ENV = process.env.NODE_ENV;
var EventKeys = {};

if (NODE_ENV !== 'production') {
  // Gated behind flag so bundlers can strip the import
  EventKeys = require('./events'); // arrays of event names
}

var DocumentEvents =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DocumentEvents, _React$Component);

  function DocumentEvents() {
    _classCallCheck(this, DocumentEvents);

    return _possibleConstructorReturn(this, _getPrototypeOf(DocumentEvents).apply(this, arguments));
  }

  _createClass(DocumentEvents, [{
    key: "componentDidMount",
    // propTypes are generated at bottom of file from all possible events
    value: function componentDidMount() {
      if (this.props.enabled) this.bindHandlers(this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unbindHandlers(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (Object.keys(this.props).sort().toString() !== Object.keys(prevProps).sort().toString()) {
        // Handlers passed in likely changed. Rebind.
        this.unbindHandlers(prevProps);
        this.bindHandlers(this.props);
      } else if (!prevProps.enabled && this.props.enabled) {
        // We became enabled
        this.bindHandlers(this.props);
      } else if (prevProps.enabled && !this.props.enabled) {
        // We became disabled
        this.unbindHandlers(prevProps);
      }
    } // Returns an array of event names created from event handler names.
    // For example, `onMouseOver` becomes `['onMouseOver', 'mouseover']`

  }, {
    key: "getKeys",
    value: function getKeys(props) {
      props = props || this.props;
      var isWindow = props.target === window;
      return Object.keys(props).filter(function (k) {
        return k.slice(0, 2) === 'on';
      }).map(function (k) {
        if (NODE_ENV !== 'production' && EventKeys.windowEvents.indexOf(k) !== -1 && !isWindow) {
          // eslint-disable-next-line
          console.warn("You attached the handler " + k + ", but this handler is only valid on the Window object.");
        }

        return [k, k.slice(2).toLowerCase()];
      });
    } // Returns the target we're meant to attach events to.

  }, {
    key: "getTarget",
    value: function getTarget(props) {
      props = props || this.props;
      var target = typeof props.target === 'function' ? props.target() : props.target; // Ensure that, by default, we get the ownerDocument of our render target
      // Useful if we render into <iframe>s or new windows.

      if (!target) target = this.node && this.node.ownerDocument;
      return target;
    }
  }, {
    key: "bindHandlers",
    value: function bindHandlers(props) {
      this._adjustHandlers(on, props);
    }
  }, {
    key: "unbindHandlers",
    value: function unbindHandlers(props) {
      this._adjustHandlers(off, props);
    }
  }, {
    key: "_adjustHandlers",
    value: function _adjustHandlers(fn, props) {
      var _this = this;

      var target = this.getTarget(props);
      if (!target) return; // If `passive` is not supported, the third param is `useCapture`, which is a bool - and we won't
      // be able to use passive at all. Otherwise, it's safe to use an object.
      // eslint-disable-next-line no-use-before-define

      var options = SUPPORTS_PASSIVE ? {
        passive: props.passive,
        capture: props.capture
      } : props.capture;
      this.getKeys(props).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            eventHandlerName = _ref2[0],
            eventName = _ref2[1];

        // Note that this is a function that looks up the latest handler on `this.props`.
        // This ensures that if the function in `props` changes, the most recent handler will
        // still be called.
        // Intentional that we're calling on `this.props` and not on `props.`
        var handler = function handler(event) {
          return _this.props[eventHandlerName](event);
        };

        fn(target, eventName, handler, options);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this.props.target) return null; // If no target, we'll have to render an el to figure out which document we're in.

      return React.createElement("noscript", {
        ref: function ref(c) {
          _this2.node = c;
        }
      });
    }
  }]);

  return DocumentEvents;
}(React.Component);

_defineProperty(DocumentEvents, "displayName", 'DocumentEvents');

_defineProperty(DocumentEvents, "defaultProps", {
  capture: false,
  enabled: true,
  passive: false
});

function on(element, event, callback, options) {
  !element.addEventListener && (event = 'on' + event);
  (element.addEventListener || element.attachEvent).call(element, event, callback, options);
  return callback;
}

function off(element, event, callback, options) {
  !element.removeEventListener && (event = 'on' + event);
  (element.removeEventListener || element.detachEvent).call(element, event, callback, options);
  return callback;
}

var SUPPORTS_PASSIVE = function passiveFeatureTest() {
  try {
    var support = false; // eslint-disable-next-line getter-return

    document.createElement("div").addEventListener("test", function () {}, {
      get passive() {
        support = true;
      }

    });
    return support;
  } catch (e) {
    return false;
  }
}(); // Generate and assign propTypes from all possible events


if (NODE_ENV !== 'production') {
  var propTypes = EventKeys.allEvents.reduce(function (result, key) {
    result[key] = PropTypes.func;
    return result;
  }, {});
  propTypes.enabled = PropTypes.bool;
  propTypes.target = PropTypes.oneOfType([PropTypes.object, PropTypes.func]);
  propTypes.passive = PropTypes.bool;
  propTypes.capture = PropTypes.bool;
  DocumentEvents.propTypes = propTypes;
}

module.exports = DocumentEvents;