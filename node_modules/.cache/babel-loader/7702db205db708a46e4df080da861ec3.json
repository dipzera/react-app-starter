{"ast":null,"code":"import { invariant } from '../utils';\nimport { Type } from '../262';\nimport { FormatNumericToString } from '../NumberFormat/FormatNumericToString';\nimport { GetOperands } from './GetOperands';\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\n\nexport function ResolvePlural(pl, n, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n      PluralRuleSelect = _a.PluralRuleSelect;\n  var internalSlots = getInternalSlots(pl);\n  invariant(Type(internalSlots) === 'Object', 'pl has to be an object');\n  invariant('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n  invariant(Type(n) === 'Number', 'n must be a number');\n\n  if (!isFinite(n)) {\n    return 'other';\n  }\n\n  var locale = internalSlots.locale,\n      type = internalSlots.type;\n  var res = FormatNumericToString(internalSlots, n);\n  var s = res.formattedString;\n  var operands = GetOperands(s);\n  return PluralRuleSelect(locale, type, n, operands);\n}","map":null,"metadata":{},"sourceType":"module"}