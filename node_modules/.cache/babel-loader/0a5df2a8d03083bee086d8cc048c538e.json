{"ast":null,"code":"var _jsxFileName = \"/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/NavLanguage.tsx\";\nimport React from \"react\";\nimport { CheckOutlined, GlobalOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { Menu, Dropdown } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { lang } from \"../../assets/data/language.data.json\";\nimport { onLocaleChange } from \"../../redux/actions/Theme\";\nimport { setProfileInfo } from \"../../redux/actions/Account\";\n\nfunction getLanguageDetail(locale) {\n  const data = lang.filter(elm => elm.langId === locale);\n  return data[0];\n}\n\nconst SelectedLanguage = ({\n  locale\n}) => {\n  const language = getLanguageDetail(locale);\n  const {\n    langName,\n    icon\n  } = language;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      maxWidth: \"20px\"\n    },\n    src: `${process.env.PUBLIC_URL}/img/flags/${icon}.png`,\n    alt: langName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-semibold ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, langName, \" \", /*#__PURE__*/React.createElement(DownOutlined, {\n    className: \"font-size-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 28\n    }\n  })));\n};\n\nconst NavLanguage = ({\n  locale,\n  configDisplay,\n  onLocaleChange,\n  triggerType,\n  setProfileInfo,\n  account,\n  token\n}) => {\n  const languageOption = /*#__PURE__*/React.createElement(Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, lang.map(elm => {\n    return /*#__PURE__*/React.createElement(Menu.Item, {\n      key: elm.langId,\n      className: locale === elm.langId ? \"ant-dropdown-menu-item-active\" : \"\",\n      onClick: () => {\n        onLocaleChange(elm[\"langId\"]);\n        const app = \"app\";\n        if (window.location.pathname.indexOf(app) >= 0) setProfileInfo({\n          Token: token,\n          User: { ...account,\n            UiLanguage: elm[\"langId\"] === \"ro\" ? 0 : elm[\"langId\"] === \"ru\" ? 1 : 2\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        maxWidth: \"20px\"\n      },\n      src: process.env.PUBLIC_URL + `/img/flags/${elm.icon}.png`,\n      alt: elm.langName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-weight-normal ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 33\n      }\n    }, elm.langName)), locale === elm.langId && /*#__PURE__*/React.createElement(CheckOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 55\n      }\n    })));\n  }));\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    placement: \"bottomRight\",\n    overlay: languageOption,\n    trigger: [triggerType],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, configDisplay ? /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#/\",\n    className: \"text-gray\",\n    onClick: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SelectedLanguage, {\n    locale: locale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(Menu, {\n    style: {\n      border: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Menu.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(GlobalOutlined, {\n    className: \"nav-icon mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }\n  }))));\n};\n\nconst mapStateToProps = ({\n  theme,\n  account,\n  auth\n}) => {\n  const {\n    locale\n  } = theme;\n  const {\n    token\n  } = auth;\n  return {\n    locale,\n    account,\n    token\n  };\n};\n\nconst mapDispatchToProps = {\n  setProfileInfo,\n  onLocaleChange\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NavLanguage);","map":{"version":3,"sources":["/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/NavLanguage.tsx"],"names":["React","CheckOutlined","GlobalOutlined","DownOutlined","Menu","Dropdown","connect","lang","onLocaleChange","setProfileInfo","getLanguageDetail","locale","data","filter","elm","langId","SelectedLanguage","language","langName","icon","maxWidth","process","env","PUBLIC_URL","NavLanguage","configDisplay","triggerType","account","token","languageOption","map","app","window","location","pathname","indexOf","Token","User","UiLanguage","e","preventDefault","border","mapStateToProps","theme","auth","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { CheckOutlined, GlobalOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { Menu, Dropdown } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { lang } from \"../../assets/data/language.data.json\";\nimport { onLocaleChange } from \"../../redux/actions/Theme\";\nimport { setProfileInfo } from \"../../redux/actions/Account\";\nimport { IState } from \"../../redux/reducers\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IAuth } from \"../../redux/reducers/Auth\";\ninterface NavLanguageProps {\n    [key: string]: any;\n}\n\nfunction getLanguageDetail(locale: string) {\n    const data = lang.filter((elm) => elm.langId === locale);\n    return data[0];\n}\n\nconst SelectedLanguage = ({ locale }: { [key: string]: any }) => {\n    const language = getLanguageDetail(locale);\n    const { langName, icon } = language;\n\n    return (\n        <div className=\"d-flex align-items-center\">\n            <img\n                style={{ maxWidth: \"20px\" }}\n                src={`${process.env.PUBLIC_URL}/img/flags/${icon}.png`}\n                alt={langName}\n            />\n            <span className=\"font-weight-semibold ml-2\">\n                {langName} <DownOutlined className=\"font-size-xs\" />\n            </span>\n        </div>\n    );\n};\n\nconst NavLanguage = ({\n    locale,\n    configDisplay,\n    onLocaleChange,\n    triggerType,\n    setProfileInfo,\n    account,\n    token,\n}: NavLanguageProps) => {\n    const languageOption = (\n        <Menu>\n            {lang.map((elm) => {\n                return (\n                    <Menu.Item\n                        key={elm.langId}\n                        className={\n                            locale === elm.langId\n                                ? \"ant-dropdown-menu-item-active\"\n                                : \"\"\n                        }\n                        onClick={() => {\n                            onLocaleChange(elm[\"langId\"]);\n                            const app = \"app\";\n                            if (window.location.pathname.indexOf(app) >= 0)\n                                setProfileInfo({\n                                    Token: token,\n                                    User: {\n                                        ...account,\n                                        UiLanguage:\n                                            elm[\"langId\"] === \"ro\"\n                                                ? 0\n                                                : elm[\"langId\"] === \"ru\"\n                                                ? 1\n                                                : 2,\n                                    },\n                                });\n                        }}\n                    >\n                        <div className=\"d-flex justify-content-between align-items-center\">\n                            <div>\n                                <img\n                                    style={{ maxWidth: \"20px\" }}\n                                    src={\n                                        process.env.PUBLIC_URL +\n                                        `/img/flags/${elm.icon}.png`\n                                    }\n                                    alt={elm.langName}\n                                />\n                                <span className=\"font-weight-normal ml-2\">\n                                    {elm.langName}\n                                </span>\n                            </div>\n                            {locale === elm.langId && <CheckOutlined />}\n                        </div>\n                    </Menu.Item>\n                );\n            })}\n        </Menu>\n    );\n    return (\n        <Dropdown\n            placement=\"bottomRight\"\n            overlay={languageOption}\n            trigger={[triggerType]}\n        >\n            {configDisplay ? (\n                <a\n                    href=\"#/\"\n                    className=\"text-gray\"\n                    onClick={(e) => e.preventDefault()}\n                >\n                    <SelectedLanguage locale={locale} />\n                </a>\n            ) : (\n                <Menu style={{ border: \"none\" }}>\n                    <Menu.Item>\n                        <GlobalOutlined className=\"nav-icon mr-0\" />\n                    </Menu.Item>\n                </Menu>\n            )}\n        </Dropdown>\n    );\n};\n\nconst mapStateToProps = ({ theme, account, auth }: IState) => {\n    const { locale } = theme as ITheme;\n    const { token } = auth as IAuth;\n    return { locale, account, token };\n};\nconst mapDispatchToProps = {\n    setProfileInfo,\n    onLocaleChange,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavLanguage);\n"]},"metadata":{},"sourceType":"module"}