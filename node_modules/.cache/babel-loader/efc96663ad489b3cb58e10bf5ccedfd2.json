{"ast":null,"code":"import { invariant } from '../utils';\nexport function DateTimeStyleFormat(dateStyle, timeStyle, dataLocaleData) {\n  var dateFormat, timeFormat;\n\n  if (timeStyle !== undefined) {\n    invariant(timeStyle === 'full' || timeStyle === 'long' || timeStyle === 'medium' || timeStyle === 'short', 'invalid timeStyle');\n    timeFormat = dataLocaleData.timeFormat[timeStyle];\n  }\n\n  if (dateStyle !== undefined) {\n    invariant(dateStyle === 'full' || dateStyle === 'long' || dateStyle === 'medium' || dateStyle === 'short', 'invalid dateStyle');\n    dateFormat = dataLocaleData.dateFormat[dateStyle];\n  }\n\n  if (dateStyle !== undefined && timeStyle !== undefined) {\n    var format = {};\n\n    for (var field in dateFormat) {\n      if (field !== 'pattern') {\n        // @ts-ignore\n        format[field] = dateFormat[field];\n      }\n    }\n\n    for (var field in timeFormat) {\n      if (field !== 'pattern' && field !== 'pattern12') {\n        // @ts-ignore\n        format[field] = timeFormat[field];\n      }\n    }\n\n    var connector = dataLocaleData.dateTimeFormat[dateStyle];\n    var pattern = connector.replace('{0}', timeFormat.pattern).replace('{1}', dateFormat.pattern);\n    format.pattern = pattern;\n\n    if ('pattern12' in timeFormat) {\n      var pattern12 = connector.replace('{0}', timeFormat.pattern12).replace('{1}', dateFormat.pattern);\n      format.pattern12 = pattern12;\n    }\n\n    return format;\n  }\n\n  if (timeStyle !== undefined) {\n    return timeFormat;\n  }\n\n  invariant(dateStyle !== undefined, 'dateStyle should not be undefined');\n  return dateFormat;\n}","map":null,"metadata":{},"sourceType":"module"}