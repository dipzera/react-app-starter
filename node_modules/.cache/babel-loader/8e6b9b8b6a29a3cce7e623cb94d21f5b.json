{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\n\nfunction areEqual(prevProps, nextProps) {\n  var values = prevProps.values,\n      otherProps = __rest(prevProps, [\"values\"]);\n\n  var nextValues = nextProps.values,\n      nextOtherProps = __rest(nextProps, [\"values\"]);\n\n  return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);\n}\n\nvar FormattedMessage = React.memo(function (props) {\n  var intl = useIntl();\n  var formatMessage = intl.formatMessage,\n      _a = intl.textComponent,\n      Text = _a === void 0 ? React.Fragment : _a;\n  var id = props.id,\n      description = props.description,\n      defaultMessage = props.defaultMessage,\n      values = props.values,\n      children = props.children,\n      _b = props.tagName,\n      Component = _b === void 0 ? Text : _b,\n      ignoreTag = props.ignoreTag;\n  var descriptor = {\n    id: id,\n    description: description,\n    defaultMessage: defaultMessage\n  };\n  var nodes = formatMessage(descriptor, values, {\n    ignoreTag: ignoreTag\n  });\n\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n\n  if (typeof children === 'function') {\n    return children(nodes);\n  }\n\n  if (Component) {\n    // Needs to use `createElement()` instead of JSX, otherwise React will\n    // warn about a missing `key` prop with rich-text message formatting.\n    return React.createElement.apply(React, __spreadArray([Component, null], nodes));\n  }\n\n  return React.createElement(React.Fragment, null, nodes);\n}, areEqual);\nFormattedMessage.displayName = 'FormattedMessage';\nexport default FormattedMessage;","map":null,"metadata":{},"sourceType":"module"}