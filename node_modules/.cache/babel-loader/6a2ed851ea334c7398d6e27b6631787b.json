{"ast":null,"code":"var _jsxFileName = \"/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/MenuContent.tsx\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Grid } from \"antd\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nimport Icon from \"../util-components/Icon\";\nimport navigationConfig from \"../../configs/NavigationConfig\";\nimport { connect } from \"react-redux\";\nimport { SIDE_NAV_LIGHT, NAV_TYPE_SIDE } from \"../../constants/ThemeConstant\";\nimport utils from \"../../utils\";\nimport { onMobileNavToggle } from \"../../redux/actions/Theme\";\nconst {\n  SubMenu\n} = Menu;\nconst {\n  useBreakpoint\n} = Grid;\n\nconst setLocale = (isLocaleOn, localeKey) => isLocaleOn ? /*#__PURE__*/React.createElement(IntlMessage, {\n  id: localeKey,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 18\n  }\n}) : localeKey.toString();\n\nconst setDefaultOpen = key => {\n  let keyList = [];\n  let keyString = \"\";\n\n  if (key) {\n    const arr = key.split(\"-\");\n\n    for (let index = 0; index < arr.length; index++) {\n      const elm = arr[index];\n      index === 0 ? keyString = elm : keyString = `${keyString}-${elm}`;\n      keyList.push(keyString);\n    }\n  }\n\n  return keyList;\n};\n\nconst SideNavContent = props => {\n  const {\n    sideNavTheme,\n    routeInfo,\n    hideGroupTitle,\n    localization,\n    onMobileNavToggle\n  } = props;\n  const isMobile = !utils.getBreakPoint(useBreakpoint()).includes(\"lg\");\n\n  const closeMobileNav = () => {\n    if (isMobile) {\n      onMobileNavToggle(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Menu, {\n    theme: sideNavTheme === SIDE_NAV_LIGHT ? \"light\" : \"dark\",\n    mode: \"inline\",\n    style: {\n      height: \"100%\",\n      borderRight: 0\n    },\n    defaultSelectedKeys: [routeInfo === null || routeInfo === void 0 ? void 0 : routeInfo.key],\n    defaultOpenKeys: setDefaultOpen(routeInfo === null || routeInfo === void 0 ? void 0 : routeInfo.key),\n    className: hideGroupTitle ? \"hide-group-title\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, navigationConfig.map(menu => menu.submenu.length > 0 ? /*#__PURE__*/React.createElement(Menu.ItemGroup, {\n    key: menu.key,\n    title: setLocale(localization, menu.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, menu.submenu.map(subMenuFirst => subMenuFirst.submenu.length > 0 ? /*#__PURE__*/React.createElement(SubMenu, {\n    icon: subMenuFirst.icon ? /*#__PURE__*/React.createElement(Icon, {\n      type: subMenuFirst === null || subMenuFirst === void 0 ? void 0 : subMenuFirst.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 45\n      }\n    }) : null,\n    key: subMenuFirst.key,\n    title: setLocale(localization, subMenuFirst.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 33\n    }\n  }, subMenuFirst.submenu.map(subMenuSecond => /*#__PURE__*/React.createElement(Menu.Item, {\n    key: subMenuSecond[\"key\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 45\n    }\n  }, subMenuSecond[\"icon\"] ? /*#__PURE__*/React.createElement(Icon, {\n    type: subMenuSecond[\"icon\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 53\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 49\n    }\n  }, setLocale(localization, subMenuSecond[\"icon\"])), /*#__PURE__*/React.createElement(Link, {\n    onClick: () => closeMobileNav(),\n    to: subMenuSecond[\"path\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 49\n    }\n  })))) : /*#__PURE__*/React.createElement(Menu.Item, {\n    key: subMenuFirst.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }\n  }, subMenuFirst.icon ? /*#__PURE__*/React.createElement(Icon, {\n    type: subMenuFirst.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 41\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 37\n    }\n  }, setLocale(localization, subMenuFirst.title)), /*#__PURE__*/React.createElement(Link, {\n    onClick: () => closeMobileNav(),\n    to: subMenuFirst.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }\n  })))) : /*#__PURE__*/React.createElement(Menu.Item, {\n    key: menu.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, menu.icon ? /*#__PURE__*/React.createElement(Icon, {\n    type: menu === null || menu === void 0 ? void 0 : menu.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 38\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, setLocale(localization, menu === null || menu === void 0 ? void 0 : menu.title)), menu.path ? /*#__PURE__*/React.createElement(Link, {\n    onClick: () => closeMobileNav(),\n    to: menu.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  }) : null)));\n};\n\nconst TopNavContent = props => {\n  const {\n    topNavColor,\n    localization\n  } = props;\n  return /*#__PURE__*/React.createElement(Menu, {\n    mode: \"horizontal\",\n    style: {\n      backgroundColor: topNavColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, navigationConfig.map(menu => menu.submenu.length > 0 ? /*#__PURE__*/React.createElement(SubMenu, {\n    key: menu.key,\n    popupClassName: \"top-nav-menu\",\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, menu.icon ? /*#__PURE__*/React.createElement(Icon, {\n      type: menu === null || menu === void 0 ? void 0 : menu.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 46\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 33\n      }\n    }, setLocale(localization, menu.title))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, menu.submenu.map(subMenuFirst => subMenuFirst.submenu.length > 0 ? /*#__PURE__*/React.createElement(SubMenu, {\n    key: subMenuFirst.key,\n    icon: subMenuFirst.icon ? /*#__PURE__*/React.createElement(Icon, {\n      type: subMenuFirst === null || subMenuFirst === void 0 ? void 0 : subMenuFirst.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 45\n      }\n    }) : null,\n    title: setLocale(localization, subMenuFirst.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 33\n    }\n  }, subMenuFirst.submenu.map(subMenuSecond => /*#__PURE__*/React.createElement(Menu.Item, {\n    key: subMenuSecond[\"key\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 49\n    }\n  }, setLocale(localization, subMenuSecond[\"title\"])), /*#__PURE__*/React.createElement(Link, {\n    to: subMenuSecond[\"path\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 49\n    }\n  })))) : /*#__PURE__*/React.createElement(Menu.Item, {\n    key: subMenuFirst.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 33\n    }\n  }, subMenuFirst.icon ? /*#__PURE__*/React.createElement(Icon, {\n    type: subMenuFirst === null || subMenuFirst === void 0 ? void 0 : subMenuFirst.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 41\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 37\n    }\n  }, setLocale(localization, subMenuFirst.title)), /*#__PURE__*/React.createElement(Link, {\n    to: subMenuFirst.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 37\n    }\n  })))) : /*#__PURE__*/React.createElement(Menu.Item, {\n    key: menu.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, menu.icon ? /*#__PURE__*/React.createElement(Icon, {\n    type: menu === null || menu === void 0 ? void 0 : menu.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 38\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 25\n    }\n  }, setLocale(localization, menu === null || menu === void 0 ? void 0 : menu.title)), menu.path ? /*#__PURE__*/React.createElement(Link, {\n    to: menu.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 38\n    }\n  }) : null)));\n};\n\nconst MenuContent = props => {\n  return props.type === NAV_TYPE_SIDE ? /*#__PURE__*/React.createElement(SideNavContent, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  })) : /*#__PURE__*/React.createElement(TopNavContent, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = ({\n  theme\n}) => {\n  const {\n    sideNavTheme,\n    topNavColor\n  } = theme;\n  return {\n    sideNavTheme,\n    topNavColor\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onMobileNavToggle\n})(MenuContent);","map":{"version":3,"sources":["/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/MenuContent.tsx"],"names":["React","Link","Menu","Grid","IntlMessage","Icon","navigationConfig","connect","SIDE_NAV_LIGHT","NAV_TYPE_SIDE","utils","onMobileNavToggle","SubMenu","useBreakpoint","setLocale","isLocaleOn","localeKey","toString","setDefaultOpen","key","keyList","keyString","arr","split","index","length","elm","push","SideNavContent","props","sideNavTheme","routeInfo","hideGroupTitle","localization","isMobile","getBreakPoint","includes","closeMobileNav","height","borderRight","map","menu","submenu","title","subMenuFirst","icon","subMenuSecond","path","TopNavContent","topNavColor","backgroundColor","MenuContent","type","mapStateToProps","theme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Grid } from \"antd\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nimport Icon from \"../util-components/Icon\";\nimport navigationConfig from \"../../configs/NavigationConfig\";\nimport { connect } from \"react-redux\";\nimport { SIDE_NAV_LIGHT, NAV_TYPE_SIDE } from \"../../constants/ThemeConstant\";\nimport utils from \"../../utils\";\nimport { onMobileNavToggle } from \"../../redux/actions/Theme\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\n\nconst { SubMenu } = Menu;\nconst { useBreakpoint } = Grid;\n\nconst setLocale = (isLocaleOn: boolean, localeKey: string | number) =>\n    isLocaleOn ? <IntlMessage id={localeKey} /> : localeKey.toString();\n\nconst setDefaultOpen = (key: any) => {\n    let keyList: any[] = [];\n    let keyString = \"\";\n    if (key) {\n        const arr = key.split(\"-\");\n        for (let index = 0; index < arr.length; index++) {\n            const elm = arr[index];\n            index === 0\n                ? (keyString = elm)\n                : (keyString = `${keyString}-${elm}`);\n            keyList.push(keyString);\n        }\n    }\n    return keyList;\n};\n\nconst SideNavContent = (props: any) => {\n    const {\n        sideNavTheme,\n        routeInfo,\n        hideGroupTitle,\n        localization,\n        onMobileNavToggle,\n    } = props;\n    const isMobile = !utils.getBreakPoint(useBreakpoint()).includes(\"lg\");\n    const closeMobileNav = () => {\n        if (isMobile) {\n            onMobileNavToggle(false);\n        }\n    };\n    return (\n        <Menu\n            theme={sideNavTheme === SIDE_NAV_LIGHT ? \"light\" : \"dark\"}\n            mode=\"inline\"\n            style={{ height: \"100%\", borderRight: 0 }}\n            defaultSelectedKeys={[routeInfo?.key]}\n            defaultOpenKeys={setDefaultOpen(routeInfo?.key)}\n            className={hideGroupTitle ? \"hide-group-title\" : \"\"}\n        >\n            {navigationConfig.map((menu) =>\n                menu.submenu.length > 0 ? (\n                    <Menu.ItemGroup\n                        key={menu.key}\n                        title={setLocale(localization, menu.title)}\n                    >\n                        {menu.submenu.map((subMenuFirst) =>\n                            subMenuFirst.submenu.length > 0 ? (\n                                <SubMenu\n                                    icon={\n                                        subMenuFirst.icon ? (\n                                            <Icon type={subMenuFirst?.icon} />\n                                        ) : null\n                                    }\n                                    key={subMenuFirst.key}\n                                    title={setLocale(\n                                        localization,\n                                        subMenuFirst.title\n                                    )}\n                                >\n                                    {subMenuFirst.submenu.map(\n                                        (subMenuSecond) => (\n                                            <Menu.Item\n                                                key={subMenuSecond[\"key\"]}\n                                            >\n                                                {subMenuSecond[\"icon\"] ? (\n                                                    <Icon\n                                                        type={\n                                                            subMenuSecond[\n                                                                \"icon\"\n                                                            ]\n                                                        }\n                                                    />\n                                                ) : null}\n                                                <span>\n                                                    {setLocale(\n                                                        localization,\n                                                        subMenuSecond[\"icon\"]\n                                                    )}\n                                                </span>\n                                                <Link\n                                                    onClick={() =>\n                                                        closeMobileNav()\n                                                    }\n                                                    to={subMenuSecond[\"path\"]}\n                                                />\n                                            </Menu.Item>\n                                        )\n                                    )}\n                                </SubMenu>\n                            ) : (\n                                <Menu.Item key={subMenuFirst.key}>\n                                    {subMenuFirst.icon ? (\n                                        <Icon type={subMenuFirst.icon} />\n                                    ) : null}\n                                    <span>\n                                        {setLocale(\n                                            localization,\n                                            subMenuFirst.title\n                                        )}\n                                    </span>\n                                    <Link\n                                        onClick={() => closeMobileNav()}\n                                        to={subMenuFirst.path}\n                                    />\n                                </Menu.Item>\n                            )\n                        )}\n                    </Menu.ItemGroup>\n                ) : (\n                    <Menu.Item key={menu.key}>\n                        {menu.icon ? <Icon type={menu?.icon} /> : null}\n                        <span>{setLocale(localization, menu?.title)}</span>\n                        {menu.path ? (\n                            <Link\n                                onClick={() => closeMobileNav()}\n                                to={menu.path}\n                            />\n                        ) : null}\n                    </Menu.Item>\n                )\n            )}\n        </Menu>\n    );\n};\n\nconst TopNavContent = (props: any) => {\n    const { topNavColor, localization } = props;\n    return (\n        <Menu mode=\"horizontal\" style={{ backgroundColor: topNavColor }}>\n            {navigationConfig.map((menu) =>\n                menu.submenu.length > 0 ? (\n                    <SubMenu\n                        key={menu.key}\n                        popupClassName=\"top-nav-menu\"\n                        title={\n                            <span>\n                                {menu.icon ? <Icon type={menu?.icon} /> : null}\n                                <span>\n                                    {setLocale(localization, menu.title)}\n                                </span>\n                            </span>\n                        }\n                    >\n                        {menu.submenu.map((subMenuFirst) =>\n                            subMenuFirst.submenu.length > 0 ? (\n                                <SubMenu\n                                    key={subMenuFirst.key}\n                                    icon={\n                                        subMenuFirst.icon ? (\n                                            <Icon type={subMenuFirst?.icon} />\n                                        ) : null\n                                    }\n                                    title={setLocale(\n                                        localization,\n                                        subMenuFirst.title\n                                    )}\n                                >\n                                    {subMenuFirst.submenu.map(\n                                        (subMenuSecond) => (\n                                            <Menu.Item\n                                                key={subMenuSecond[\"key\"]}\n                                            >\n                                                <span>\n                                                    {setLocale(\n                                                        localization,\n                                                        subMenuSecond[\"title\"]\n                                                    )}\n                                                </span>\n                                                <Link\n                                                    to={subMenuSecond[\"path\"]}\n                                                />\n                                            </Menu.Item>\n                                        )\n                                    )}\n                                </SubMenu>\n                            ) : (\n                                <Menu.Item key={subMenuFirst.key}>\n                                    {subMenuFirst.icon ? (\n                                        <Icon type={subMenuFirst?.icon} />\n                                    ) : null}\n                                    <span>\n                                        {setLocale(\n                                            localization,\n                                            subMenuFirst.title\n                                        )}\n                                    </span>\n                                    <Link to={subMenuFirst.path} />\n                                </Menu.Item>\n                            )\n                        )}\n                    </SubMenu>\n                ) : (\n                    <Menu.Item key={menu.key}>\n                        {menu.icon ? <Icon type={menu?.icon} /> : null}\n                        <span>{setLocale(localization, menu?.title)}</span>\n                        {menu.path ? <Link to={menu.path} /> : null}\n                    </Menu.Item>\n                )\n            )}\n        </Menu>\n    );\n};\n\nconst MenuContent = (props: any) => {\n    return props.type === NAV_TYPE_SIDE ? (\n        <SideNavContent {...props} />\n    ) : (\n        <TopNavContent {...props} />\n    );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { sideNavTheme, topNavColor } = theme as ITheme;\n    return { sideNavTheme, topNavColor };\n};\n\nexport default connect(mapStateToProps, { onMobileNavToggle })(MenuContent);\n"]},"metadata":{},"sourceType":"module"}