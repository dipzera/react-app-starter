{"ast":null,"code":"import { DATE_TIME_PROPS } from './utils';\nimport { ToLocalTime } from './ToLocalTime';\nimport { TimeClip } from '../262';\n\nfunction pad(n) {\n  if (n < 10) {\n    return \"0\" + n;\n  }\n\n  return String(n);\n}\n\nfunction offsetToGmtString(gmtFormat, hourFormat, offsetInMs, style) {\n  var offsetInMinutes = Math.floor(offsetInMs / 60000);\n  var mins = Math.abs(offsetInMinutes) % 60;\n  var hours = Math.floor(Math.abs(offsetInMinutes) / 60);\n\n  var _a = hourFormat.split(';'),\n      positivePattern = _a[0],\n      negativePattern = _a[1];\n\n  var offsetStr = '';\n  var pattern = offsetInMs < 0 ? negativePattern : positivePattern;\n\n  if (style === 'long') {\n    offsetStr = pattern.replace('HH', pad(hours)).replace('H', String(hours)).replace('mm', pad(mins)).replace('m', String(mins));\n  } else if (mins || hours) {\n    if (!mins) {\n      pattern = pattern.replace(/:?m+/, '');\n    }\n\n    offsetStr = pattern.replace(/H+/, String(hours)).replace(/m+/, String(mins));\n  }\n\n  return gmtFormat.replace('{0}', offsetStr);\n}\n/**\n * https://tc39.es/ecma402/#sec-partitiondatetimepattern\n * @param dtf\n * @param x\n */\n\n\nexport function FormatDateTimePattern(dtf, patternParts, x, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n      localeData = _a.localeData,\n      getDefaultTimeZone = _a.getDefaultTimeZone,\n      tzData = _a.tzData;\n  x = TimeClip(x);\n  /** IMPL START */\n\n  var internalSlots = getInternalSlots(dtf);\n  var dataLocale = internalSlots.dataLocale;\n  var dataLocaleData = localeData[dataLocale];\n  /** IMPL END */\n\n  var locale = internalSlots.locale;\n  var nfOptions = Object.create(null);\n  nfOptions.useGrouping = false;\n  var nf = new Intl.NumberFormat(locale, nfOptions);\n  var nf2Options = Object.create(null);\n  nf2Options.minimumIntegerDigits = 2;\n  nf2Options.useGrouping = false;\n  var nf2 = new Intl.NumberFormat(locale, nf2Options);\n  var tm = ToLocalTime(x, // @ts-ignore\n  internalSlots.calendar, internalSlots.timeZone, {\n    tzData: tzData\n  });\n  var result = [];\n\n  for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\n    var patternPart = patternParts_1[_i];\n    var p = patternPart.type;\n\n    if (p === 'literal') {\n      result.push({\n        type: 'literal',\n        value: patternPart.value\n      });\n    } else if (DATE_TIME_PROPS.indexOf(p) > -1) {\n      var fv = '';\n      var f = internalSlots[p]; // @ts-ignore\n\n      var v = tm[p];\n\n      if (p === 'year' && v <= 0) {\n        v = 1 - v;\n      }\n\n      if (p === 'month') {\n        v++;\n      }\n\n      var hourCycle = internalSlots.hourCycle;\n\n      if (p === 'hour' && (hourCycle === 'h11' || hourCycle === 'h12')) {\n        v = v % 12;\n\n        if (v === 0 && hourCycle === 'h12') {\n          v = 12;\n        }\n      }\n\n      if (p === 'hour' && hourCycle === 'h24') {\n        if (v === 0) {\n          v = 24;\n        }\n      }\n\n      if (f === 'numeric') {\n        fv = nf.format(v);\n      } else if (f === '2-digit') {\n        fv = nf2.format(v);\n\n        if (fv.length > 2) {\n          fv = fv.slice(fv.length - 2, fv.length);\n        }\n      } else if (f === 'narrow' || f === 'short' || f === 'long') {\n        if (p === 'era') {\n          fv = dataLocaleData[p][f][v];\n        } else if (p === 'timeZoneName') {\n          var timeZoneName = dataLocaleData.timeZoneName,\n              gmtFormat = dataLocaleData.gmtFormat,\n              hourFormat = dataLocaleData.hourFormat;\n          var timeZone = internalSlots.timeZone || getDefaultTimeZone();\n          var timeZoneData = timeZoneName[timeZone];\n\n          if (timeZoneData && timeZoneData[f]) {\n            fv = timeZoneData[f][+tm.inDST];\n          } else {\n            // Fallback to gmtFormat\n            fv = offsetToGmtString(gmtFormat, hourFormat, tm.timeZoneOffset, f);\n          }\n        } else if (p === 'month') {\n          fv = dataLocaleData.month[f][v - 1];\n        } else {\n          fv = dataLocaleData[p][f][v];\n        }\n      }\n\n      result.push({\n        type: p,\n        value: fv\n      });\n    } else if (p === 'ampm') {\n      var v = tm.hour;\n      var fv = void 0;\n\n      if (v > 11) {\n        fv = dataLocaleData.pm;\n      } else {\n        fv = dataLocaleData.am;\n      }\n\n      result.push({\n        type: 'dayPeriod',\n        value: fv\n      });\n    } else if (p === 'relatedYear') {\n      var v = tm.relatedYear; // @ts-ignore\n\n      var fv = nf.format(v);\n      result.push({\n        // @ts-ignore TODO: Fix TS type\n        type: 'relatedYear',\n        value: fv\n      });\n    } else if (p === 'yearName') {\n      var v = tm.yearName; // @ts-ignore\n\n      var fv = nf.format(v);\n      result.push({\n        // @ts-ignore TODO: Fix TS type\n        type: 'yearName',\n        value: fv\n      });\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}