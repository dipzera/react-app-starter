{"ast":null,"code":"import { invariant } from '../utils';\nimport { SingularRelativeTimeUnit } from './SingularRelativeTimeUnit';\nimport { MakePartsList } from './MakePartsList';\nimport { ToString, Type, SameValue } from '../262';\nexport function PartitionRelativeTimePattern(rtf, value, unit, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  invariant(Type(value) === 'Number', \"value must be number, instead got \" + typeof value, TypeError);\n  invariant(Type(unit) === 'String', \"unit must be number, instead got \" + typeof value, TypeError);\n\n  if (isNaN(value) || !isFinite(value)) {\n    throw new RangeError(\"Invalid value \" + value);\n  }\n\n  var resolvedUnit = SingularRelativeTimeUnit(unit);\n\n  var _b = getInternalSlots(rtf),\n      fields = _b.fields,\n      style = _b.style,\n      numeric = _b.numeric,\n      pluralRules = _b.pluralRules,\n      numberFormat = _b.numberFormat;\n\n  var entry = resolvedUnit;\n\n  if (style === 'short') {\n    entry = resolvedUnit + \"-short\";\n  } else if (style === 'narrow') {\n    entry = resolvedUnit + \"-narrow\";\n  }\n\n  if (!(entry in fields)) {\n    entry = resolvedUnit;\n  }\n\n  var patterns = fields[entry];\n\n  if (numeric === 'auto') {\n    if (ToString(value) in patterns) {\n      return [{\n        type: 'literal',\n        value: patterns[ToString(value)]\n      }];\n    }\n  }\n\n  var tl = 'future';\n\n  if (SameValue(value, -0) || value < 0) {\n    tl = 'past';\n  }\n\n  var po = patterns[tl];\n  var fv = typeof numberFormat.formatToParts === 'function' ? numberFormat.formatToParts(Math.abs(value)) : // TODO: If formatToParts is not supported, we assume the whole formatted\n  // number is a part\n  [{\n    type: 'literal',\n    value: numberFormat.format(Math.abs(value)),\n    unit: unit\n  }];\n  var pr = pluralRules.select(value);\n  var pattern = po[pr];\n  return MakePartsList(pattern, resolvedUnit, fv);\n}","map":null,"metadata":{},"sourceType":"module"}