{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport canUseDom from './canUseDom';\nvar MARK_KEY = \"rc-util-key\";\n\nfunction getContainer(option) {\n  if (option.attachTo) {\n    return option.attachTo;\n  }\n\n  var head = document.querySelector('head');\n  return head || document.body;\n}\n\nexport function injectCSS(css) {\n  var _option$csp;\n\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!canUseDom()) {\n    return null;\n  }\n\n  var styleNode = document.createElement('style');\n  styleNode.nonce = (_option$csp = option.csp) === null || _option$csp === void 0 ? void 0 : _option$csp.nonce;\n  styleNode.innerHTML = css;\n  var container = getContainer(option);\n  var firstChild = container.firstChild;\n\n  if (option.prepend && firstChild) {\n    container.insertBefore(styleNode, firstChild);\n  } else {\n    container.appendChild(styleNode);\n  }\n\n  return styleNode;\n}\nexport function updateCSS(css, key) {\n  var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var container = getContainer(option);\n\n  var existNode = _toConsumableArray(container.children).find(function (node) {\n    return node.tagName === 'STYLE' && node[MARK_KEY] === key;\n  });\n\n  if (existNode) {\n    existNode.parentElement.removeChild(existNode);\n  }\n\n  var newNode = injectCSS(css, option);\n  newNode[MARK_KEY] = key;\n  return newNode;\n}","map":null,"metadata":{},"sourceType":"module"}