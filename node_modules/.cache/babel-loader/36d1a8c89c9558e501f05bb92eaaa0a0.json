{"ast":null,"code":"var _jsxFileName = \"/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/NavSearch/SearchInput.tsx\";\nimport * as React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { DashboardOutlined, AppstoreOutlined, AntDesignOutlined, FileTextOutlined, SearchOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { AutoComplete, Input } from \"antd\";\nimport IntlMessage from \"../../util-components/IntlMessage\";\nimport navigationConfig from \"../../../configs/NavigationConfig\";\n\nfunction getOptionList(navigationTree, optionTree) {\n  optionTree = optionTree ? optionTree : [];\n\n  for (const navItem of navigationTree) {\n    if (navItem.submenu.length === 0) {\n      optionTree.push(navItem);\n    }\n\n    if (navItem.submenu.length > 0) {\n      getOptionList(navItem.submenu, optionTree);\n    }\n  }\n\n  return optionTree;\n}\n\nconst optionList = getOptionList(navigationConfig);\n\nconst getCategoryIcon = category => {\n  switch (category) {\n    case \"dashboards\":\n      return /*#__PURE__*/React.createElement(DashboardOutlined, {\n        className: \"text-success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 20\n        }\n      });\n\n    case \"apps\":\n      return /*#__PURE__*/React.createElement(AppstoreOutlined, {\n        className: \"text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 20\n        }\n      });\n\n    case \"components\":\n      return /*#__PURE__*/React.createElement(AntDesignOutlined, {\n        className: \"text-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 20\n        }\n      });\n\n    case \"extra\":\n      return /*#__PURE__*/React.createElement(FileTextOutlined, {\n        className: \"text-warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 20\n        }\n      });\n\n    default:\n      return null;\n  }\n};\n\nconst searchResult = () => optionList.map(item => {\n  const category = item.key.split(\"-\")[0];\n  return {\n    value: item.path,\n    label: /*#__PURE__*/React.createElement(Link, {\n      to: item.path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-list-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, getCategoryIcon(category)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font-weight-semibold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessage, {\n      id: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font-size-sm text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }\n    }, category, \" \"))))\n  };\n});\n\nconst SearchInput = props => {\n  const {\n    active,\n    close,\n    isMobile,\n    mode\n  } = props;\n  const [value, setValue] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  const inputRef = useRef(null);\n\n  const onSelect = () => {\n    setValue(\"\");\n    setOptions([]);\n\n    if (close) {\n      close();\n    }\n  };\n\n  const onSearch = searchText => {\n    setValue(searchText); // setOptions(!searchText ? [] : searchResult(searchText))\n  }; //\n  // const autofocus = () => {\n  // \tinputRef.current.focus();\n  // }\n  // if(active) {\n  // \tautofocus()\n  // }\n\n\n  return /*#__PURE__*/React.createElement(AutoComplete, {\n    ref: inputRef,\n    className: `nav-search-input ${isMobile ? \"is-mobile\" : \"\"} ${mode === \"light\" ? \"light\" : \"\"}`,\n    dropdownClassName: \"nav-search-dropdown\",\n    options: options,\n    onSelect: onSelect,\n    onSearch: onSearch,\n    value: value,\n    filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Search...\",\n    prefix: /*#__PURE__*/React.createElement(SearchOutlined, {\n      className: \"mr-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default SearchInput;","map":{"version":3,"sources":["/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/NavSearch/SearchInput.tsx"],"names":["React","useState","useRef","DashboardOutlined","AppstoreOutlined","AntDesignOutlined","FileTextOutlined","SearchOutlined","Link","AutoComplete","Input","IntlMessage","navigationConfig","getOptionList","navigationTree","optionTree","navItem","submenu","length","push","optionList","getCategoryIcon","category","searchResult","map","item","key","split","value","path","label","title","SearchInput","props","active","close","isMobile","mode","setValue","options","setOptions","inputRef","onSelect","onSearch","searchText","inputValue","option","toUpperCase","indexOf"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useState, useRef } from \"react\";\nimport {\n    DashboardOutlined,\n    AppstoreOutlined,\n    AntDesignOutlined,\n    FileTextOutlined,\n    SearchOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { AutoComplete, Input } from \"antd\";\nimport IntlMessage from \"../../util-components/IntlMessage\";\nimport navigationConfig, { INavTree } from \"../../../configs/NavigationConfig\";\n\ninterface ISearchInput {\n    active?: boolean;\n    close?: any;\n    isMobile?: boolean;\n    mode?: \"light\" | \"dark\";\n}\n\nfunction getOptionList(navigationTree: INavTree[], optionTree?: any) {\n    optionTree = optionTree ? optionTree : [];\n    for (const navItem of navigationTree) {\n        if (navItem.submenu.length === 0) {\n            optionTree.push(navItem);\n        }\n        if (navItem.submenu.length > 0) {\n            getOptionList(navItem.submenu, optionTree);\n        }\n    }\n    return optionTree;\n}\n\nconst optionList = getOptionList(navigationConfig);\n\nconst getCategoryIcon = (category: string) => {\n    switch (category) {\n        case \"dashboards\":\n            return <DashboardOutlined className=\"text-success\" />;\n        case \"apps\":\n            return <AppstoreOutlined className=\"text-danger\" />;\n        case \"components\":\n            return <AntDesignOutlined className=\"text-primary\" />;\n        case \"extra\":\n            return <FileTextOutlined className=\"text-warning\" />;\n        default:\n            return null;\n    }\n};\n\nconst searchResult = () =>\n    optionList.map((item: any) => {\n        const category = item.key.split(\"-\")[0];\n        return {\n            value: item.path,\n            label: (\n                <Link to={item.path}>\n                    <div className=\"search-list-item\">\n                        <div className=\"icon\">{getCategoryIcon(category)}</div>\n                        <div>\n                            <div className=\"font-weight-semibold\">\n                                <IntlMessage id={item.title} />\n                            </div>\n                            <div className=\"font-size-sm text-muted\">\n                                {category}{\" \"}\n                            </div>\n                        </div>\n                    </div>\n                </Link>\n            ),\n        };\n    });\n\nconst SearchInput = (props: ISearchInput) => {\n    const { active, close, isMobile, mode } = props;\n    const [value, setValue] = useState(\"\");\n    const [options, setOptions] = useState([]);\n    const inputRef = useRef(null);\n\n    const onSelect = () => {\n        setValue(\"\");\n        setOptions([]);\n        if (close) {\n            close();\n        }\n    };\n\n    const onSearch = (searchText: any) => {\n        setValue(searchText);\n        // setOptions(!searchText ? [] : searchResult(searchText))\n    };\n    //\n    // const autofocus = () => {\n    // \tinputRef.current.focus();\n    // }\n\n    // if(active) {\n    // \tautofocus()\n    // }\n\n    return (\n        <AutoComplete\n            ref={inputRef}\n            className={`nav-search-input ${isMobile ? \"is-mobile\" : \"\"} ${\n                mode === \"light\" ? \"light\" : \"\"\n            }`}\n            dropdownClassName=\"nav-search-dropdown\"\n            options={options}\n            onSelect={onSelect}\n            onSearch={onSearch}\n            value={value}\n            filterOption={(inputValue, option) =>\n                option!.value\n                    .toUpperCase()\n                    .indexOf(inputValue.toUpperCase()) !== -1\n            }\n        >\n            <Input\n                placeholder=\"Search...\"\n                prefix={<SearchOutlined className=\"mr-0\" />}\n            />\n        </AutoComplete>\n    );\n};\nexport default SearchInput;\n"]},"metadata":{},"sourceType":"module"}