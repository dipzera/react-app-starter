{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from '../utils';\nimport { DATE_TIME_PROPS, removalPenalty, additionPenalty, differentNumericTypePenalty, longMorePenalty, shortMorePenalty, shortLessPenalty, longLessPenalty } from './utils';\nimport { processDateTimePattern } from './skeleton';\n\nfunction isNumericType(t) {\n  return t === 'numeric' || t === '2-digit';\n}\n/**\n * Credit: https://github.com/andyearnshaw/Intl.js/blob/0958dc1ad8153f1056653ea22b8208f0df289a4e/src/12.datetimeformat.js#L611\n * with some modifications\n * @param options\n * @param format\n */\n\n\nexport function bestFitFormatMatcherScore(options, format) {\n  var score = 0;\n\n  if (options.hour12 && !format.hour12) {\n    score -= removalPenalty;\n  } else if (!options.hour12 && format.hour12) {\n    score -= additionPenalty;\n  }\n\n  for (var _i = 0, DATE_TIME_PROPS_1 = DATE_TIME_PROPS; _i < DATE_TIME_PROPS_1.length; _i++) {\n    var prop = DATE_TIME_PROPS_1[_i];\n    var optionsProp = options[prop];\n    var formatProp = format[prop];\n\n    if (optionsProp === undefined && formatProp !== undefined) {\n      score -= additionPenalty;\n    } else if (optionsProp !== undefined && formatProp === undefined) {\n      score -= removalPenalty;\n    } else if (optionsProp !== formatProp) {\n      // extra penalty for numeric vs non-numeric\n      if (isNumericType(optionsProp) !== isNumericType(formatProp)) {\n        score -= differentNumericTypePenalty;\n      } else {\n        var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n        var optionsPropIndex = values.indexOf(optionsProp);\n        var formatPropIndex = values.indexOf(formatProp);\n        var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));\n\n        if (delta === 2) {\n          score -= longMorePenalty;\n        } else if (delta === 1) {\n          score -= shortMorePenalty;\n        } else if (delta === -1) {\n          score -= shortLessPenalty;\n        } else if (delta === -2) {\n          score -= longLessPenalty;\n        }\n      }\n    }\n  }\n\n  return score;\n}\n/**\n * https://tc39.es/ecma402/#sec-bestfitformatmatcher\n * Just alias to basic for now\n * @param options\n * @param formats\n * @param implDetails Implementation details\n */\n\nexport function BestFitFormatMatcher(options, formats) {\n  var bestScore = -Infinity;\n  var bestFormat = formats[0];\n  invariant(Array.isArray(formats), 'formats should be a list of things');\n\n  for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n    var format = formats_1[_i];\n    var score = bestFitFormatMatcherScore(options, format);\n\n    if (score > bestScore) {\n      bestScore = score;\n      bestFormat = format;\n    }\n  }\n\n  var skeletonFormat = __assign({}, bestFormat);\n\n  var patternFormat = {\n    rawPattern: bestFormat.rawPattern\n  };\n  processDateTimePattern(bestFormat.rawPattern, patternFormat); // Kinda following https://github.com/unicode-org/icu/blob/dd50e38f459d84e9bf1b0c618be8483d318458ad/icu4j/main/classes/core/src/com/ibm/icu/text/DateTimePatternGenerator.java\n  // Method adjustFieldTypes\n\n  for (var prop in skeletonFormat) {\n    var skeletonValue = skeletonFormat[prop];\n    var patternValue = patternFormat[prop];\n    var requestedValue = options[prop]; // Don't mess with minute/second or we can get in the situation of\n    // 7:0:0 which is weird\n\n    if (prop === 'minute' || prop === 'second') {\n      continue;\n    } // Nothing to do here\n\n\n    if (!requestedValue) {\n      continue;\n    } // https://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons\n    // Looks like we should not convert numeric to alphabetic but the other way\n    // around is ok\n\n\n    if (isNumericType(patternValue) && !isNumericType(requestedValue)) {\n      continue;\n    }\n\n    if (skeletonValue === requestedValue) {\n      continue;\n    }\n\n    patternFormat[prop] = requestedValue;\n  } // Copy those over\n\n\n  patternFormat.pattern = skeletonFormat.pattern;\n  patternFormat.pattern12 = skeletonFormat.pattern12;\n  patternFormat.skeleton = skeletonFormat.skeleton;\n  patternFormat.rangePatterns = skeletonFormat.rangePatterns;\n  patternFormat.rangePatterns12 = skeletonFormat.rangePatterns12;\n  return patternFormat;\n}","map":null,"metadata":{},"sourceType":"module"}