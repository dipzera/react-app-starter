{"ast":null,"code":"import { invariant } from '../utils';\nimport { Type, YearFromTime, WeekDay, MonthFromTime, DateFromTime, HourFromTime, MinFromTime, SecFromTime } from '../262';\n\nfunction getApplicableZoneData(t, timeZone, tzData) {\n  var _a;\n\n  var zoneData = tzData[timeZone]; // We don't have data for this so just say it's UTC\n\n  if (!zoneData) {\n    return [0, false];\n  }\n\n  var i = 0;\n  var offset = 0;\n  var dst = false;\n\n  for (; i <= zoneData.length; i++) {\n    if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n      ;\n      _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n      break;\n    }\n  }\n\n  return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\n\n\nexport function ToLocalTime(t, calendar, timeZone, _a) {\n  var tzData = _a.tzData;\n  invariant(Type(t) === 'Number', 'invalid time');\n  invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n\n  var _b = getApplicableZoneData(t, timeZone, tzData),\n      timeZoneOffset = _b[0],\n      inDST = _b[1];\n\n  var tz = t + timeZoneOffset;\n  var year = YearFromTime(tz);\n  return {\n    weekday: WeekDay(tz),\n    era: year < 0 ? 'BC' : 'AD',\n    year: year,\n    relatedYear: undefined,\n    yearName: undefined,\n    month: MonthFromTime(tz),\n    day: DateFromTime(tz),\n    hour: HourFromTime(tz),\n    minute: MinFromTime(tz),\n    second: SecFromTime(tz),\n    inDST: inDST,\n    // IMPORTANT: Not in spec\n    timeZoneOffset: timeZoneOffset\n  };\n}","map":null,"metadata":{},"sourceType":"module"}