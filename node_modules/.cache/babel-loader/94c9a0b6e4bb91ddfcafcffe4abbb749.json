{"ast":null,"code":"import { CanonicalizeLocaleList } from '../CanonicalizeLocaleList';\nimport { ToDateTimeOptions } from './ToDateTimeOptions';\nimport { GetOption } from '../GetOption';\nimport { ResolveLocale } from '../ResolveLocale';\nimport { IsValidTimeZoneName } from '../IsValidTimeZoneName';\nimport { CanonicalizeTimeZoneName } from '../CanonicalizeTimeZoneName';\nimport { BasicFormatMatcher } from './BasicFormatMatcher';\nimport { BestFitFormatMatcher } from './BestFitFormatMatcher';\nimport { invariant } from '../utils';\nimport { DATE_TIME_PROPS } from './utils';\nimport { DateTimeStyleFormat } from './DateTimeStyleFormat';\n\nfunction isTimeRelated(opt) {\n  for (var _i = 0, _a = ['hour', 'minute', 'second']; _i < _a.length; _i++) {\n    var prop = _a[_i];\n    var value = opt[prop];\n\n    if (value !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction resolveHourCycle(hc, hcDefault, hour12) {\n  if (hc == null) {\n    hc = hcDefault;\n  }\n\n  if (hour12 !== undefined) {\n    if (hour12) {\n      if (hcDefault === 'h11' || hcDefault === 'h23') {\n        hc = 'h11';\n      } else {\n        hc = 'h12';\n      }\n    } else {\n      invariant(!hour12, 'hour12 must not be set');\n\n      if (hcDefault === 'h11' || hcDefault === 'h23') {\n        hc = 'h23';\n      } else {\n        hc = 'h24';\n      }\n    }\n  }\n\n  return hc;\n}\n\nvar TYPE_REGEX = /^[a-z0-9]{3,8}$/i;\n/**\n * https://tc39.es/ecma402/#sec-initializedatetimeformat\n * @param dtf DateTimeFormat\n * @param locales locales\n * @param opts options\n */\n\nexport function InitializeDateTimeFormat(dtf, locales, opts, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n      availableLocales = _a.availableLocales,\n      localeData = _a.localeData,\n      getDefaultLocale = _a.getDefaultLocale,\n      getDefaultTimeZone = _a.getDefaultTimeZone,\n      relevantExtensionKeys = _a.relevantExtensionKeys,\n      tzData = _a.tzData,\n      uppercaseLinks = _a.uppercaseLinks; // @ts-ignore\n\n  var requestedLocales = CanonicalizeLocaleList(locales);\n  var options = ToDateTimeOptions(opts, 'any', 'date');\n  var opt = Object.create(null);\n  var matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n  opt.localeMatcher = matcher;\n  var calendar = GetOption(options, 'calendar', 'string', undefined, undefined);\n\n  if (calendar !== undefined && !TYPE_REGEX.test(calendar)) {\n    throw new RangeError('Malformed calendar');\n  }\n\n  var internalSlots = getInternalSlots(dtf);\n  opt.ca = calendar;\n  var numberingSystem = GetOption(options, 'numberingSystem', 'string', undefined, undefined);\n\n  if (numberingSystem !== undefined && !TYPE_REGEX.test(numberingSystem)) {\n    throw new RangeError('Malformed numbering system');\n  }\n\n  opt.nu = numberingSystem;\n  var hour12 = GetOption(options, 'hour12', 'boolean', undefined, undefined);\n  var hourCycle = GetOption(options, 'hourCycle', 'string', ['h11', 'h12', 'h23', 'h24'], undefined);\n\n  if (hour12 !== undefined) {\n    // @ts-ignore\n    hourCycle = null;\n  }\n\n  opt.hc = hourCycle;\n  var r = ResolveLocale(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);\n  internalSlots.locale = r.locale;\n  calendar = r.ca;\n  internalSlots.calendar = calendar;\n  internalSlots.hourCycle = r.hc;\n  internalSlots.numberingSystem = r.nu;\n  var dataLocale = r.dataLocale;\n  internalSlots.dataLocale = dataLocale;\n  var timeZone = options.timeZone;\n\n  if (timeZone !== undefined) {\n    timeZone = String(timeZone);\n\n    if (!IsValidTimeZoneName(timeZone, {\n      tzData: tzData,\n      uppercaseLinks: uppercaseLinks\n    })) {\n      throw new RangeError('Invalid timeZoneName');\n    }\n\n    timeZone = CanonicalizeTimeZoneName(timeZone, {\n      tzData: tzData,\n      uppercaseLinks: uppercaseLinks\n    });\n  } else {\n    timeZone = getDefaultTimeZone();\n  }\n\n  internalSlots.timeZone = timeZone;\n  opt = Object.create(null);\n  opt.weekday = GetOption(options, 'weekday', 'string', ['narrow', 'short', 'long'], undefined);\n  opt.era = GetOption(options, 'era', 'string', ['narrow', 'short', 'long'], undefined);\n  opt.year = GetOption(options, 'year', 'string', ['2-digit', 'numeric'], undefined);\n  opt.month = GetOption(options, 'month', 'string', ['2-digit', 'numeric', 'narrow', 'short', 'long'], undefined);\n  opt.day = GetOption(options, 'day', 'string', ['2-digit', 'numeric'], undefined);\n  opt.hour = GetOption(options, 'hour', 'string', ['2-digit', 'numeric'], undefined);\n  opt.minute = GetOption(options, 'minute', 'string', ['2-digit', 'numeric'], undefined);\n  opt.second = GetOption(options, 'second', 'string', ['2-digit', 'numeric'], undefined);\n  opt.timeZoneName = GetOption(options, 'timeZoneName', 'string', ['short', 'long'], undefined);\n  var dataLocaleData = localeData[dataLocale];\n  invariant(!!dataLocaleData, \"Missing locale data for \" + dataLocale);\n  var formats = dataLocaleData.formats[calendar]; // UNSPECCED: IMPLEMENTATION DETAILS\n\n  if (!formats) {\n    throw new RangeError(\"Calendar \\\"\" + calendar + \"\\\" is not supported. Try setting \\\"calendar\\\" to 1 of the following: \" + Object.keys(dataLocaleData.formats).join(', '));\n  }\n\n  var formatMatcher = GetOption(options, 'formatMatcher', 'string', ['basic', 'best fit'], 'best fit');\n  var dateStyle = GetOption(options, 'dateStyle', 'string', ['full', 'long', 'medium', 'short'], undefined);\n  internalSlots.dateStyle = dateStyle;\n  var timeStyle = GetOption(options, 'timeStyle', 'string', ['full', 'long', 'medium', 'short'], undefined);\n  internalSlots.timeStyle = timeStyle;\n  var bestFormat;\n\n  if (dateStyle === undefined && timeStyle === undefined) {\n    if (formatMatcher === 'basic') {\n      bestFormat = BasicFormatMatcher(opt, formats);\n    } else {\n      // IMPL DETAILS START\n      if (isTimeRelated(opt)) {\n        var hc = resolveHourCycle(internalSlots.hourCycle, dataLocaleData.hourCycle, hour12);\n        opt.hour12 = hc === 'h11' || hc === 'h12';\n      } // IMPL DETAILS END\n\n\n      bestFormat = BestFitFormatMatcher(opt, formats);\n    }\n  } else {\n    for (var _i = 0, DATE_TIME_PROPS_1 = DATE_TIME_PROPS; _i < DATE_TIME_PROPS_1.length; _i++) {\n      var prop = DATE_TIME_PROPS_1[_i];\n      var p = opt[prop];\n\n      if (p !== undefined) {\n        throw new TypeError(\"Intl.DateTimeFormat can't set option \" + prop + \" when \" + (dateStyle ? 'dateStyle' : 'timeStyle') + \" is used\");\n      }\n    }\n\n    bestFormat = DateTimeStyleFormat(dateStyle, timeStyle, dataLocaleData);\n  } // IMPL DETAIL START\n  // For debugging\n\n\n  internalSlots.format = bestFormat; // IMPL DETAIL END\n\n  for (var prop in opt) {\n    var p = bestFormat[prop];\n\n    if (p !== undefined) {\n      internalSlots[prop] = p;\n    }\n  }\n\n  var pattern;\n  var rangePatterns;\n\n  if (internalSlots.hour !== undefined) {\n    var hc = resolveHourCycle(internalSlots.hourCycle, dataLocaleData.hourCycle, hour12);\n    internalSlots.hourCycle = hc;\n\n    if (hc === 'h11' || hc === 'h12') {\n      pattern = bestFormat.pattern12;\n      rangePatterns = bestFormat.rangePatterns12;\n    } else {\n      pattern = bestFormat.pattern;\n      rangePatterns = bestFormat.rangePatterns;\n    }\n  } else {\n    // @ts-ignore\n    internalSlots.hourCycle = undefined;\n    pattern = bestFormat.pattern;\n    rangePatterns = bestFormat.rangePatterns;\n  }\n\n  internalSlots.pattern = pattern;\n  internalSlots.rangePatterns = rangePatterns;\n  return dtf;\n}","map":null,"metadata":{},"sourceType":"module"}