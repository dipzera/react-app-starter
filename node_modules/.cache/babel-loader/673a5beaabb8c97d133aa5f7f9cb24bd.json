{"ast":null,"code":"var _jsxFileName = \"/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/ThemeConfigurator.tsx\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Radio, Switch, Grid } from \"antd\";\nimport { toggleCollapsedNav, onNavTypeChange, onNavStyleChange, onTopNavColorChange, onHeaderNavColorChange } from \"redux/actions/Theme\";\nimport NavLanguage from \"components/layout-components/NavLanguage\";\nimport { SIDE_NAV_LIGHT, NAV_TYPE_SIDE, NAV_TYPE_TOP, SIDE_NAV_DARK } from \"constants/ThemeConstant\";\nimport IntlMessage from \"components/util-components/IntlMessage\";\nimport Utils from \"utils/index\";\nconst colorOptions = [\"#3e82f7\", \"#24a772\", \"#de4436\", \"#924aca\", \"#193550\"];\nconst white = \"#ffffff\";\n\nconst ListOption = ({\n  name,\n  selector,\n  disabled,\n  vertical\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: `my-4 ${vertical ? \"\" : \"d-flex align-items-center justify-content-between\"}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: `${disabled ? \"opacity-0-3\" : \"\"} ${vertical ? \"mb-3\" : \"\"}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }\n}, name), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }\n}, selector));\n\nconst ThemeConfigurator = ({\n  navType,\n  sideNavTheme,\n  navCollapsed,\n  topNavColor,\n  headerNavColor,\n  locale,\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange\n}) => {\n  const {\n    useBreakpoint\n  } = Grid;\n  const screens = Utils.getBreakPoint(useBreakpoint());\n  const isMobile = !screens.includes(\"lg\");\n  const isNavTop = navType === NAV_TYPE_TOP;\n  const isCollapse = navCollapsed;\n\n  const ontopNavColorClick = value => {\n    if (value === white) {\n      onHeaderNavColorChange(\"#193550\");\n      onTopNavColorChange(white);\n    } else {\n      onTopNavColorChange(value);\n      onHeaderNavColorChange(white);\n    }\n  };\n\n  const onHeaderNavColorClick = value => {\n    if (value === white) {\n      onTopNavColorChange(colorOptions[0]);\n    }\n\n    onHeaderNavColorChange(value);\n  };\n\n  const onNavTypeClick = value => {\n    if (value === NAV_TYPE_TOP) {\n      onTopNavColorChange(colorOptions[0]);\n      onHeaderNavColorChange(white);\n      toggleCollapsedNav(false);\n    }\n\n    if (value === NAV_TYPE_TOP) {\n      onHeaderNavColorChange(white);\n    }\n\n    onNavTypeChange(value);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-3 font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IntlMessage, {\n    id: \"theme.Navigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), isNavTop ? /*#__PURE__*/React.createElement(ListOption, {\n    name: /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.TopNavColor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    }),\n    vertical: true,\n    selector: /*#__PURE__*/React.createElement(Radio.Group, {\n      className: \"color-selector\",\n      onChange: e => ontopNavColorClick(e.target.value),\n      value: topNavColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, colorOptions.map(color => /*#__PURE__*/React.createElement(Radio, {\n      key: color,\n      style: {\n        backgroundColor: color\n      },\n      value: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Radio, {\n      className: \"bg-white\",\n      key: white,\n      style: {\n        backgroundColor: white\n      },\n      value: white,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(ListOption, {\n    name: /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.HeaderNavColor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }\n    }),\n    vertical: true,\n    selector: /*#__PURE__*/React.createElement(Radio.Group, {\n      className: \"color-selector\",\n      onChange: e => onHeaderNavColorClick(e.target.value),\n      value: headerNavColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, colorOptions.map(color => /*#__PURE__*/React.createElement(Radio, {\n      key: color,\n      style: {\n        backgroundColor: color\n      },\n      value: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Radio, {\n      className: \"bg-white\",\n      key: white,\n      style: {\n        backgroundColor: white\n      },\n      value: white,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }), isMobile || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListOption, {\n    name: /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.NavigationType\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }),\n    selector: /*#__PURE__*/React.createElement(Radio.Group, {\n      size: \"small\",\n      onChange: e => onNavTypeClick(e.target.value),\n      value: navType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Radio.Button, {\n      value: NAV_TYPE_SIDE,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.Side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: NAV_TYPE_TOP,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.Top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 22\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ListOption, {\n    name: /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.SideNavColor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }),\n    selector: /*#__PURE__*/React.createElement(Radio.Group, {\n      disabled: isNavTop,\n      size: \"small\",\n      onChange: e => onNavStyleChange(e.target.value),\n      value: sideNavTheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Radio.Button, {\n      value: SIDE_NAV_LIGHT,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.Light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: SIDE_NAV_DARK,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.Dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 22\n      }\n    }))),\n    disabled: isNavTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ListOption, {\n    name: /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.SideNavCollapse\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }),\n    selector: /*#__PURE__*/React.createElement(Switch, {\n      disabled: isNavTop,\n      checked: isCollapse,\n      onChange: () => toggleCollapsedNav(!navCollapsed),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }),\n    disabled: isNavTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-3 font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IntlMessage, {\n    id: \"theme.Locale\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 12\n    }\n  })), /*#__PURE__*/React.createElement(ListOption, {\n    name: /*#__PURE__*/React.createElement(IntlMessage, {\n      id: \"theme.Language\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }),\n    selector: /*#__PURE__*/React.createElement(NavLanguage, {\n      configDisplay: true,\n      triggerType: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = ({\n  theme\n}) => {\n  const {\n    navType,\n    sideNavTheme,\n    navCollapsed,\n    topNavColor,\n    headerNavColor,\n    locale\n  } = theme;\n  return {\n    navType,\n    sideNavTheme,\n    navCollapsed,\n    topNavColor,\n    headerNavColor,\n    locale\n  };\n};\n\nconst mapDispatchToProps = {\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ThemeConfigurator);","map":{"version":3,"sources":["/home/vlad/github/react-emilus-boilerplate/src/components/layout-components/ThemeConfigurator.tsx"],"names":["React","connect","Radio","Switch","Grid","toggleCollapsedNav","onNavTypeChange","onNavStyleChange","onTopNavColorChange","onHeaderNavColorChange","NavLanguage","SIDE_NAV_LIGHT","NAV_TYPE_SIDE","NAV_TYPE_TOP","SIDE_NAV_DARK","IntlMessage","Utils","colorOptions","white","ListOption","name","selector","disabled","vertical","ThemeConfigurator","navType","sideNavTheme","navCollapsed","topNavColor","headerNavColor","locale","useBreakpoint","screens","getBreakPoint","isMobile","includes","isNavTop","isCollapse","ontopNavColorClick","value","onHeaderNavColorClick","onNavTypeClick","e","target","map","color","backgroundColor","mapStateToProps","theme","mapDispatchToProps"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Radio, Switch, Grid } from \"antd\";\nimport {\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange,\n} from \"redux/actions/Theme\";\nimport NavLanguage from \"components/layout-components/NavLanguage\";\nimport {\n  SIDE_NAV_LIGHT,\n  NAV_TYPE_SIDE,\n  NAV_TYPE_TOP,\n  SIDE_NAV_DARK,\n} from \"constants/ThemeConstant\";\nimport IntlMessage from \"components/util-components/IntlMessage\";\nimport Utils from \"utils/index\";\nimport { IState } from \"redux/reducers\";\nimport { ITheme } from \"redux/reducers/Theme\";\n\nexport interface IListOption {\n  name?: string | ReactNode;\n  selector?: any;\n  disabled?: boolean;\n  vertical?: boolean;\n}\ninterface IThemeConfigurator {\n  [key: string]: any;\n}\n\nconst colorOptions = [\"#3e82f7\", \"#24a772\", \"#de4436\", \"#924aca\", \"#193550\"];\n\nconst white = \"#ffffff\";\n\nconst ListOption = ({ name, selector, disabled, vertical }: IListOption) => (\n  <div\n    className={`my-4 ${\n      vertical ? \"\" : \"d-flex align-items-center justify-content-between\"\n    }`}\n  >\n    <div\n      className={`${disabled ? \"opacity-0-3\" : \"\"} ${vertical ? \"mb-3\" : \"\"}`}\n    >\n      {name}\n    </div>\n    <div>{selector}</div>\n  </div>\n);\n\nconst ThemeConfigurator = ({\n  navType,\n  sideNavTheme,\n  navCollapsed,\n  topNavColor,\n  headerNavColor,\n  locale,\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange,\n}: IThemeConfigurator) => {\n  const { useBreakpoint } = Grid;\n  const screens = Utils.getBreakPoint(useBreakpoint());\n  const isMobile = !screens.includes(\"lg\");\n  const isNavTop = navType === NAV_TYPE_TOP;\n  const isCollapse = navCollapsed;\n\n  const ontopNavColorClick = (value: any) => {\n    if (value === white) {\n      onHeaderNavColorChange(\"#193550\");\n      onTopNavColorChange(white);\n    } else {\n      onTopNavColorChange(value);\n      onHeaderNavColorChange(white);\n    }\n  };\n  const onHeaderNavColorClick = (value: any) => {\n    if (value === white) {\n      onTopNavColorChange(colorOptions[0]);\n    }\n    onHeaderNavColorChange(value);\n  };\n\n  const onNavTypeClick = (value: any) => {\n    if (value === NAV_TYPE_TOP) {\n      onTopNavColorChange(colorOptions[0]);\n      onHeaderNavColorChange(white);\n      toggleCollapsedNav(false);\n    }\n    if (value === NAV_TYPE_TOP) {\n      onHeaderNavColorChange(white);\n    }\n    onNavTypeChange(value);\n  };\n\n  return (\n    <>\n      <div className=\"mb-5\">\n        <h4 className=\"mb-3 font-weight-bold\">\n          <IntlMessage id={\"theme.Navigation\"} />\n        </h4>\n        {isNavTop ? (\n          <ListOption\n            name={<IntlMessage id={\"theme.TopNavColor\"} />}\n            vertical\n            selector={\n              <Radio.Group\n                className=\"color-selector\"\n                onChange={(e) => ontopNavColorClick(e.target.value)}\n                value={topNavColor}\n              >\n                {colorOptions.map((color) => (\n                  <Radio\n                    key={color}\n                    style={{ backgroundColor: color }}\n                    value={color}\n                  />\n                ))}\n                <Radio\n                  className=\"bg-white\"\n                  key={white}\n                  style={{ backgroundColor: white }}\n                  value={white}\n                />\n              </Radio.Group>\n            }\n          />\n        ) : (\n          <ListOption\n            name={<IntlMessage id={\"theme.HeaderNavColor\"} />}\n            vertical\n            selector={\n              <Radio.Group\n                className=\"color-selector\"\n                onChange={(e) => onHeaderNavColorClick(e.target.value)}\n                value={headerNavColor}\n              >\n                {colorOptions.map((color) => (\n                  <Radio\n                    key={color}\n                    style={{ backgroundColor: color }}\n                    value={color}\n                  />\n                ))}\n                <Radio\n                  className=\"bg-white\"\n                  key={white}\n                  style={{ backgroundColor: white }}\n                  value={white}\n                />\n              </Radio.Group>\n            }\n          />\n        )}\n\n        {isMobile || (\n          <>\n            <ListOption\n              name={<IntlMessage id={\"theme.NavigationType\"} />}\n              selector={\n                <Radio.Group\n                  size=\"small\"\n                  onChange={(e) => onNavTypeClick(e.target.value)}\n                  value={navType}\n                >\n                  <Radio.Button value={NAV_TYPE_SIDE}>\n                    {<IntlMessage id={\"theme.Side\"} />}\n                  </Radio.Button>\n                  <Radio.Button value={NAV_TYPE_TOP}>\n                    {<IntlMessage id={\"theme.Top\"} />}\n                  </Radio.Button>\n                </Radio.Group>\n              }\n            />\n            <ListOption\n              name={<IntlMessage id={\"theme.SideNavColor\"} />}\n              selector={\n                <Radio.Group\n                  disabled={isNavTop}\n                  size=\"small\"\n                  onChange={(e) => onNavStyleChange(e.target.value)}\n                  value={sideNavTheme}\n                >\n                  <Radio.Button value={SIDE_NAV_LIGHT}>\n                    {<IntlMessage id={\"theme.Light\"} />}\n                  </Radio.Button>\n                  <Radio.Button value={SIDE_NAV_DARK}>\n                    {<IntlMessage id={\"theme.Dark\"} />}\n                  </Radio.Button>\n                </Radio.Group>\n              }\n              disabled={isNavTop}\n            />\n            <ListOption\n              name={<IntlMessage id={\"theme.SideNavCollapse\"} />}\n              selector={\n                <Switch\n                  disabled={isNavTop}\n                  checked={isCollapse}\n                  onChange={() => toggleCollapsedNav(!navCollapsed)}\n                />\n              }\n              disabled={isNavTop}\n            />\n          </>\n        )}\n      </div>\n      <div className=\"mb-5\">\n        <h4 className=\"mb-3 font-weight-bold\">\n          {<IntlMessage id={\"theme.Locale\"} />}\n        </h4>\n        <ListOption\n          name={<IntlMessage id={\"theme.Language\"} />}\n          selector={<NavLanguage configDisplay triggerType={\"click\"} />}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n  const {\n    navType,\n    sideNavTheme,\n    navCollapsed,\n    topNavColor,\n    headerNavColor,\n    locale,\n  } = theme as ITheme;\n  return {\n    navType,\n    sideNavTheme,\n    navCollapsed,\n    topNavColor,\n    headerNavColor,\n    locale,\n  };\n};\n\nconst mapDispatchToProps = {\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThemeConfigurator);\n"]},"metadata":{},"sourceType":"module"}