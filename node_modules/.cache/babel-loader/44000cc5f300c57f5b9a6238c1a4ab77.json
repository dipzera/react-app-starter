{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { RangePatternType } from '../types/date-time';\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\n\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g; // trim patterns after transformations\n\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction matchSkeletonPattern(match, result) {\n  var len = match.length;\n\n  switch (match[0]) {\n    // Era\n    case 'G':\n      result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n      return '{era}';\n    // Year\n\n    case 'y':\n    case 'Y':\n    case 'u':\n    case 'U':\n    case 'r':\n      result.year = len === 2 ? '2-digit' : 'numeric';\n      return '{year}';\n    // Quarter\n\n    case 'q':\n    case 'Q':\n      throw new RangeError('`w/Q` (quarter) patterns are not supported');\n    // Month\n\n    case 'M':\n    case 'L':\n      result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n      return '{month}';\n    // Week\n\n    case 'w':\n    case 'W':\n      throw new RangeError('`w/W` (week of year) patterns are not supported');\n\n    case 'd':\n      result.day = ['numeric', '2-digit'][len - 1];\n      return '{day}';\n\n    case 'D':\n    case 'F':\n    case 'g':\n      result.day = 'numeric';\n      return '{day}';\n    // Weekday\n\n    case 'E':\n      result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n      return '{weekday}';\n\n    case 'e':\n      result.weekday = [undefined, undefined, 'short', 'long', 'narrow', 'short'][len - 1];\n      return '{weekday}';\n\n    case 'c':\n      result.weekday = [undefined, undefined, 'short', 'long', 'narrow', 'short'][len - 1];\n      return '{weekday}';\n    // Period\n\n    case 'a': // AM, PM\n\n    case 'b': // am, pm, noon, midnight\n\n    case 'B':\n      // flexible day periods\n      result.hour12 = true;\n      return '{ampm}';\n    // Hour\n\n    case 'h':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      result.hour12 = true;\n      return '{hour}';\n\n    case 'H':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      return '{hour}';\n\n    case 'K':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      result.hour12 = true;\n      return '{hour}';\n\n    case 'k':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      return '{hour}';\n\n    case 'j':\n    case 'J':\n    case 'C':\n      throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n    // Minute\n\n    case 'm':\n      result.minute = ['numeric', '2-digit'][len - 1];\n      return '{minute}';\n    // Second\n\n    case 's':\n      result.second = ['numeric', '2-digit'][len - 1];\n      return '{second}';\n\n    case 'S':\n    case 'A':\n      result.second = 'numeric';\n      return '{second}';\n    // Zone\n\n    case 'z': // 1..3, 4: specific non-location format\n\n    case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n    case 'O': // 1, 4: miliseconds in day short, long\n\n    case 'v': // 1, 4: generic non-location format\n\n    case 'V': // 1, 2, 3, 4: time zone ID or city\n\n    case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n    case 'x':\n      // 1, 2, 3, 4: The ISO8601 varios formats\n      result.timeZoneName = len < 4 ? 'short' : 'long';\n      return '{timeZoneName}';\n  }\n\n  return '';\n}\n\nfunction skeletonTokenToTable2(c) {\n  switch (c) {\n    // Era\n    case 'G':\n      return 'era';\n    // Year\n\n    case 'y':\n    case 'Y':\n    case 'u':\n    case 'U':\n    case 'r':\n      return 'year';\n    // Month\n\n    case 'M':\n    case 'L':\n      return 'month';\n    // Day\n\n    case 'd':\n    case 'D':\n    case 'F':\n    case 'g':\n      return 'day';\n    // Period\n\n    case 'a': // AM, PM\n\n    case 'b': // am, pm, noon, midnight\n\n    case 'B':\n      // flexible day periods\n      return 'ampm';\n    // Hour\n\n    case 'h':\n    case 'H':\n    case 'K':\n    case 'k':\n      return 'hour';\n    // Minute\n\n    case 'm':\n      return 'minute';\n    // Second\n\n    case 's':\n    case 'S':\n    case 'A':\n      return 'second';\n\n    default:\n      throw new RangeError('Invalid range pattern token');\n  }\n}\n\nexport function processDateTimePattern(pattern, result) {\n  var literals = []; // Use skeleton to populate result, but use mapped pattern to populate pattern\n\n  var pattern12 = pattern // Double apostrophe\n  .replace(/'{2}/g, '{apostrophe}') // Apostrophe-escaped\n  .replace(/'(.*?)'/g, function (_, literal) {\n    literals.push(literal);\n    return \"$$\" + (literals.length - 1) + \"$$\";\n  }).replace(DATE_TIME_REGEX, function (m) {\n    return matchSkeletonPattern(m, result || {});\n  }); //Restore literals\n\n  if (literals.length) {\n    pattern12 = pattern12.replace(/\\$\\$(\\d+)\\$\\$/g, function (_, i) {\n      return literals[+i];\n    }).replace(/\\{apostrophe\\}/g, \"'\");\n  } // Handle apostrophe-escaped things\n\n\n  return [pattern12.replace(/([\\s\\uFEFF\\xA0])\\{ampm\\}([\\s\\uFEFF\\xA0])/, '$1').replace('{ampm}', '').replace(expPatternTrimmer, ''), pattern12];\n}\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\n\nexport function parseDateTimeSkeleton(skeleton, rawPattern, rangePatterns, intervalFormatFallback) {\n  if (rawPattern === void 0) {\n    rawPattern = skeleton;\n  }\n\n  var result = {\n    pattern: '',\n    pattern12: '',\n    skeleton: skeleton,\n    rawPattern: rawPattern,\n    rangePatterns: {},\n    rangePatterns12: {}\n  };\n\n  if (rangePatterns) {\n    for (var k in rangePatterns) {\n      var key = skeletonTokenToTable2(k);\n      var rawPattern_1 = rangePatterns[k];\n      var intervalResult = {\n        patternParts: []\n      };\n\n      var _a = processDateTimePattern(rawPattern_1, intervalResult),\n          pattern_1 = _a[0],\n          pattern12_1 = _a[1];\n\n      result.rangePatterns[key] = __assign(__assign({}, intervalResult), {\n        patternParts: splitRangePattern(pattern_1)\n      });\n      result.rangePatterns12[key] = __assign(__assign({}, intervalResult), {\n        patternParts: splitRangePattern(pattern12_1)\n      });\n    }\n  } else if (intervalFormatFallback) {\n    var patternParts = splitFallbackRangePattern(intervalFormatFallback);\n    result.rangePatterns.default = {\n      patternParts: patternParts\n    };\n    result.rangePatterns12.default = {\n      patternParts: patternParts\n    };\n  } // Process skeleton\n\n\n  skeleton.replace(DATE_TIME_REGEX, function (m) {\n    return matchSkeletonPattern(m, result);\n  });\n\n  var _b = processDateTimePattern(rawPattern),\n      pattern = _b[0],\n      pattern12 = _b[1];\n\n  result.pattern = pattern;\n  result.pattern12 = pattern12;\n  return result;\n}\nexport function splitFallbackRangePattern(pattern) {\n  var parts = pattern.split(/(\\{[0|1]\\})/g).filter(Boolean);\n  return parts.map(function (pattern) {\n    switch (pattern) {\n      case '{0}':\n        return {\n          source: RangePatternType.startRange,\n          pattern: pattern\n        };\n\n      case '{1}':\n        return {\n          source: RangePatternType.endRange,\n          pattern: pattern\n        };\n\n      default:\n        return {\n          source: RangePatternType.shared,\n          pattern: pattern\n        };\n    }\n  });\n}\nexport function splitRangePattern(pattern) {\n  var PART_REGEX = /\\{(.*?)\\}/g; // Map of part and index within the string\n\n  var parts = {};\n  var match;\n  var splitIndex = 0;\n\n  while (match = PART_REGEX.exec(pattern)) {\n    if (!(match[0] in parts)) {\n      parts[match[0]] = match.index;\n    } else {\n      splitIndex = match.index;\n      break;\n    }\n  }\n\n  if (!splitIndex) {\n    return [{\n      source: RangePatternType.startRange,\n      pattern: pattern\n    }];\n  }\n\n  return [{\n    source: RangePatternType.startRange,\n    pattern: pattern.slice(0, splitIndex)\n  }, {\n    source: RangePatternType.endRange,\n    pattern: pattern.slice(splitIndex)\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}