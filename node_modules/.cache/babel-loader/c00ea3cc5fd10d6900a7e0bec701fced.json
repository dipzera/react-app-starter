{"ast":null,"code":"var _jsxFileName = \"/home/vlad/github/react-emilus-boilerplate/src/views/index.tsx\";\nimport * as React from \"react\";\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppLayout from \"layouts/app-layout\";\nimport AuthLayout from \"layouts/auth-layout\";\nimport AppLocale from \"lang\";\nimport { IntlProvider } from \"react-intl\";\nimport { ConfigProvider } from \"antd\";\nimport { APP_PREFIX_PATH, AUTH_PREFIX_PATH } from \"configs/AppConfig\";\n\nfunction RouteInterceptor({\n  component: Component,\n  isAuthenticated,\n  ...rest\n}) {\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => isAuthenticated ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: AUTH_PREFIX_PATH,\n        state: {\n          from: props.location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport const Views = props => {\n  const {\n    locale,\n    location,\n    token,\n    history\n  } = props;\n  const currentAppLocale = locale ? AppLocale[locale] : \"en\";\n  return /*#__PURE__*/React.createElement(IntlProvider, {\n    locale: currentAppLocale.locale,\n    messages: currentAppLocale.messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ConfigProvider, {\n    locale: currentAppLocale.antd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    to: APP_PREFIX_PATH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: AUTH_PREFIX_PATH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AuthLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(RouteInterceptor, {\n    path: APP_PREFIX_PATH,\n    isAuthenticated: token,\n    component: AppLayout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst mapStateToProps = ({\n  theme,\n  auth\n}) => {\n  const {\n    locale\n  } = theme;\n  const {\n    token\n  } = auth;\n  return {\n    locale,\n    token\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, null)(Views));","map":{"version":3,"sources":["/home/vlad/github/react-emilus-boilerplate/src/views/index.tsx"],"names":["React","Route","Switch","Redirect","withRouter","connect","AppLayout","AuthLayout","AppLocale","IntlProvider","ConfigProvider","APP_PREFIX_PATH","AUTH_PREFIX_PATH","RouteInterceptor","component","Component","isAuthenticated","rest","props","pathname","state","from","location","Views","locale","token","history","currentAppLocale","messages","antd","mapStateToProps","theme","auth"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,KADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,UAJF,QAMO,kBANP;AAOA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,SAAP,MAAsB,MAAtB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,mBAAlD;;AAMA,SAASC,gBAAT,CAA0B;AACxBC,EAAAA,SAAS,EAAEC,SADa;AAExBC,EAAAA,eAFwB;AAGxB,KAAGC;AAHqB,CAA1B,EAIQ;AACN,sBACE,oBAAC,KAAD,oBACMA,IADN;AAEE,IAAA,MAAM,EAAGC,KAAD,IACNF,eAAe,gBACb,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADa,gBAGb,oBAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFC,QAAAA,QAAQ,EAAEP,gBADR;AAEFQ,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAFL,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAiBD;;AACD,OAAO,MAAMC,KAAK,GAAIL,KAAD,IAAmB;AACtC,QAAM;AAAEM,IAAAA,MAAF;AAAUF,IAAAA,QAAV;AAAoBG,IAAAA,KAApB;AAA2BC,IAAAA;AAA3B,MAAuCR,KAA7C;AACA,QAAMS,gBAAgB,GAAGH,MAAM,GAAGhB,SAAS,CAACgB,MAAD,CAAZ,GAAuB,IAAtD;AACA,sBACE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEG,gBAAgB,CAACH,MAD3B;AAEE,IAAA,QAAQ,EAAEG,gBAAgB,CAACC,QAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAED,gBAAgB,CAACE,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAElB,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,eAOE,oBAAC,gBAAD;AACE,IAAA,IAAI,EAAED,eADR;AAEE,IAAA,eAAe,EAAEc,KAFnB;AAGE,IAAA,SAAS,EAAEnB,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CAJF,CADF;AAsBD,CAzBM;;AA2BP,MAAMwB,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA6B;AACnD,QAAM;AAAER,IAAAA;AAAF,MAAaO,KAAnB;AACA,QAAM;AAAEN,IAAAA;AAAF,MAAYO,IAAlB;AACA,SAAO;AAAER,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAP;AACD,CAJD;;AAMA,eAAerB,UAAU,CAACC,OAAO,CAACyB,eAAD,EAAkB,IAAlB,CAAP,CAA+BP,KAA/B,CAAD,CAAzB","sourcesContent":["import * as React from \"react\";\nimport {\n  Route,\n  Switch,\n  Redirect,\n  withRouter,\n  RouteComponentProps,\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppLayout from \"layouts/app-layout\";\nimport AuthLayout from \"layouts/auth-layout\";\nimport AppLocale from \"lang\";\nimport { IntlProvider } from \"react-intl\";\nimport { ConfigProvider } from \"antd\";\nimport { APP_PREFIX_PATH, AUTH_PREFIX_PATH } from \"configs/AppConfig\";\nimport { IState } from \"redux/reducers\";\nimport { ITheme } from \"redux/reducers/Theme\";\nimport { IAuth } from \"redux/reducers/Auth\";\ninterface IViews extends ITheme, IAuth, RouteComponentProps {}\n\nfunction RouteInterceptor({\n  component: Component,\n  isAuthenticated,\n  ...rest\n}: any) {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: AUTH_PREFIX_PATH,\n              state: { from: props.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\nexport const Views = (props: IViews) => {\n  const { locale, location, token, history } = props;\n  const currentAppLocale = locale ? AppLocale[locale] : \"en\";\n  return (\n    <IntlProvider\n      locale={currentAppLocale.locale}\n      messages={currentAppLocale.messages}\n    >\n      <ConfigProvider locale={currentAppLocale.antd}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to={APP_PREFIX_PATH} />\n          </Route>\n          <Route path={AUTH_PREFIX_PATH}>\n            <AuthLayout />\n          </Route>\n          <RouteInterceptor\n            path={APP_PREFIX_PATH}\n            isAuthenticated={token}\n            component={AppLayout}\n          />\n        </Switch>\n      </ConfigProvider>\n    </IntlProvider>\n  );\n};\n\nconst mapStateToProps = ({ theme, auth }: IState) => {\n  const { locale } = theme as ITheme;\n  const { token } = auth as IAuth;\n  return { locale, token };\n};\n\nexport default withRouter(connect(mapStateToProps, null)(Views));\n"]},"metadata":{},"sourceType":"module"}